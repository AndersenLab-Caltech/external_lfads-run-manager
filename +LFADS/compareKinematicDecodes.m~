function compareKinematicDecodes(seq, resultSet, varargin)

% which condition is each trial
[cnames, ~, cond] = unique({seq.targetDirectionName});
nC = numel(cnames);

pydim = 2;

cmap = distinguishable_colors(numel(resultSet), {'k', 'w'});

h = gobjects(numel(seq), 
for icond = 1:nC
    ttp = find(cond==icond);
    for itr = 1:numel(ttp)
        ntr = ttp(itr);

        T = resultSet{1}.T;
        
        % make the figure for raw spks decoding
        subtightplot(pydim, ceil(nC / pydim), icond);
        h(ntr, 1) = plot(T(ntr).X(1,:), T(ntr).X(2,:), '-', 'color', [0.25 0.25 0.25]);
        
        ylim([-1 1]*160);
        xlim([-1 1]*160);
        set(gca,'xtick',[], 'ytick', []);

        for iR = 1:numel(resultSet)
            Tdec = resultSet{iR};
            h(ntr, 2) = plot(Tdec(ntr).xk(1,:), Tdec(ntr).xk(2,:), 'Color', cmap(iR, :));
        end
       

        show_legend = false;
        if show_legend && itr == (pydim-1)*pxdim+1
            xlabel('x pos');
            ylabel('y pos');
            
            legend({'true cursor', 'raw neural + vkf', ['lfads ' ...
                                'facts + vkf']},'location','best');
        end
        %set(gca,'box','off');
        %set(gca,'xtick',[-150 150], 'ytick', [-150 150]);
    end
end
%equalize_axes(ah);

figure(1)
set(gcf,'PaperOrientation', 'landscape')
set(gcf,'paperposition', [0 0 10.5, 10.5/13*7])
set(gcf,'papersize', [10.5 5.7])
print('-dpdf', fullfile(outdir1, 'decoded_trajectories_raw'))

figure(2)
set(gcf,'PaperOrientation', 'landscape')
set(gcf,'paperposition', [0 0 10.5, 10.5/13*7])
set(gcf,'papersize', [10.5 5.7])
print('-dpdf', fullfile(outdir1, 'decoded_trajectories_lfads'))
